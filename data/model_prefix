{-# LANGUAGE FlexibleInstances, Safe #-}
module Model where

import Prelude hiding (putChar, putStr, putStrLn, print, getChar, getLine, getContents, interact, readFile, writeFile, appendFile, readIO, readLn , ioError, userError)
import qualified Data.Map as Map
import Data.List
import FootballDB

-- Perspective monad

type Perspective a = String -> a

unit_p :: a -> Perspective a
unit_p x = const x

bind_p :: Perspective a -> (a -> Perspective b) -> Perspective b
bind_p f g s = g (f s) s

instance (Show b) => Show (Perspective b) where
  show f = show $ f ""

-- Conventional implicatures monad

data CI a = CI a String

unit_ci :: a -> CI a
unit_ci x = CI x ""

bind_ci :: CI a -> (a -> CI b) -> CI b
bind_ci (CI a s) f = CI b (combine s z) where
   CI b z = f a
   combine "" x = x
   combine x "" = x
   combine x y = x ++ "\n" ++ y
write :: String -> CI ()
write x = CI () x

instance Show a => Show (CI a) where
  show (CI a s) = "AT-ISSUE:\n" ++ show a ++ "\n\nSIDE COMMENT:\n" ++ s

-- Standard probability monad

newtype Probability a = Probability [(a,Double)]

fromProbability :: Probability a -> [(a,Double)]
fromProbability (Probability p) = p

scale :: Double -> Probability a -> Probability a
scale d (Probability p) = Probability [(x,p*d) | (x,p) <- p]

unit_pr :: a -> Probability a
unit_pr x = Probability [(x,1.0)]

bind_pr :: Probability a -> (a -> Probability b) -> Probability b
bind_pr (Probability m) k = Probability $ concat $ do
  (x,p) <- m
  return $ fromProbability $ scale p $ k x

compressProbability :: (Ord a, Eq a) => Probability a -> Probability a
compressProbability (Probability p) = Probability $ Map.toList $ foldr fun Map.empty p where
  fun (x,p) = Map.insertWith (+) x p

orderProbability :: Probability a -> Probability a
orderProbability (Probability p) = Probability $ sortBy (\a b -> compare (snd b) (snd a)) p

instance (Ord a, Show a, Eq a) => Show (Probability a) where
  show p = tabulate $ fromProbability $ orderProbability $ compressProbability p

-- Semirings

class Semiring sr where
  zero :: sr
  one :: sr
  plus :: sr -> sr -> sr
  times :: sr -> sr -> sr

data SimpleSemiring = I | U | P | L | C deriving (Show, Eq, Ord, Enum, Bounded)

minus :: SimpleSemiring -> SimpleSemiring
minus I = C
minus U = L
minus P = P
minus L = U
minus C = I

toSimpleSemiring :: Double -> SimpleSemiring
toSimpleSemiring d | d < 0.2 = I
                   | d < 0.4 = U
                   | d < 0.6 = P
                   | d < 0.8 = L
                   | otherwise = C

instance Semiring SimpleSemiring where
  zero = I
  one = C
  plus x y | x < y = y
           | otherwise = x
  times x y = minus ((minus x) `plus` (minus y))

data StandardMinMax = StMinMax Double deriving (Eq, Show, Ord)

instance Semiring StandardMinMax where
  zero = StMinMax 0.0
  one = StMinMax 1.0
  plus x y | x < y = y
           | otherwise = x
  times x y | x > y = y
            | otherwise = x

newtype Likelihood sr a = Likelihood [(a,sr)] deriving Eq

orderLikelihood :: Ord sr => Likelihood sr a -> Likelihood sr a
orderLikelihood (Likelihood lh) = Likelihood $ sortBy (\a b -> compare (snd b) (snd a)) lh

instance (Ord a, Show a, Eq a, Ord sr, Semiring sr, Show sr) => Show (Likelihood sr a) where
  show p = tabulate $ fromLikelihood $ orderLikelihood $ compressLikelihood p

fromLikelihood :: Likelihood sr a -> [(a,sr)]
fromLikelihood (Likelihood p) = p

scale_likelihood :: Semiring sr => sr -> Likelihood sr a -> Likelihood sr a
scale_likelihood d (Likelihood p) = Likelihood [(x,p `times` d) | (x,p) <- p]

unit_lh :: Semiring sr => a -> Likelihood sr a
unit_lh x = Likelihood [(x,one)]

bind_lh :: Semiring sr => Likelihood sr a -> (a -> Likelihood sr b) -> Likelihood sr b
bind_lh (Likelihood m) k = Likelihood $ concat $ do
  (x,p) <- m
  return $ fromLikelihood $ scale_likelihood p $ k x

compressLikelihood :: (Ord a, Eq a, Semiring sr) => Likelihood sr a -> Likelihood sr a
compressLikelihood (Likelihood p) = Likelihood $ Map.toList $ foldr fun Map.empty p where
  fun (x,p) = Map.insertWith plus x p

-- General stuff

relation r x y = r ++ "(" ++ y ++ "," ++ x ++ ")"
predicate p x = p ++ "(" ++ x ++ ")"

-- Utils

tabulate :: (Show a, Show b) => [(a,b)] -> String
tabulate l = intercalate "\n" $ map pprint l where
  pprint (a,b) = pad a ++ "   " ++ show b
  pad a = show a ++ take (n - (length $ show a)) (repeat ' ')
  n = maximum $ map (length . show . fst) l
